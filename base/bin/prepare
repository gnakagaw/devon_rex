#!/bin/bash
set -euo pipefail

platform_name=$(sh -c '. /etc/os-release ; echo ${ID}:${VERSION_CODENAME}')

# Install required packages
required_packages=(
  autoconf
  build-essential
  curl
  git
  gnupg
  libbz2-dev
  libcurl4-openssl-dev
  libevent-dev
  libffi-dev
  libglib2.0-dev
  libncurses-dev
  libreadline-dev
  libssl-dev
  libxml2-dev
  libxslt-dev
  libyaml-dev
  openssh-client
  patchutils
  procps
  software-properties-common
  sudo
  tzdata
  unzip
  wget
  zlib1g-dev
)

apt-get update -y
apt-get install -qq -y --no-install-recommends ${required_packages[*]}

# Configure locale
case "${platform_name}" in
  'debian:buster' | 'debian:stretch' | 'ubuntu:bionic')
    apt-get install -qq -y --no-install-recommends locales
    sed -i -e "s/# ${LANGUAGE}/${LANGUAGE}/" /etc/locale.gen
    locale-gen "$LANGUAGE"
    dpkg-reconfigure --frontend noninteractive locales
    ;;
  'ubuntu:xenial')
    apt-get install -qq -y --no-install-recommends language-pack-en python-software-properties
    locale-gen "$LANGUAGE"
    update-locale "$LANGUAGE"
    ;;
  *)
    echo "Unknown platform! '${platform_name}'"
    exit 1
    ;;
esac

# Clean up
apt-get -qyy autoremove
rm -rf /var/lib/apt/lists/*
apt-get -qyy clean

# Create a user
adduser --system --shell /bin/bash --home "$RUNNER_USER_HOME" "$RUNNER_USER"

# Verify the user and group
id --user "$RUNNER_USER"
groups=$(id --groups --name "$RUNNER_USER")
[[ "$groups" == "$RUNNER_GROUP" ]] || (echo "Unexpected groups: '${groups}'" ; exit 1)

# Configure Bash on shell
cat << 'EOF' >> "${RUNNER_USER_HOME}/.bashrc"
alias ls='ls --color=auto'
alias ll='ls -lF'
alias l='ls -lAF'
alias grep='grep --color=auto'
alias less='less -ciRM'
EOF
chown "${RUNNER_USER}:${RUNNER_GROUP}" "${RUNNER_USER_HOME}/.bashrc"
